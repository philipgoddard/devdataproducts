f1
?rev
f1 <- factor(letters)
f2 <- rev(factor(letters))
f3 <- rev(factor(letters, levels = rev(letters)))
f1
f2
f3
levels(f1) <- rev(levels(f1))
f1
f1 <- factor(letters)
levels(f1) <- rev(levels(f1))
f1
rm(list=ls())
f1 <- factor(letters)
class(f1)
levels(f1) <- rev(levels(f1))
class(f1)
f1
rm(list=ls())
f1 <- factor(letters)
f1
levels(f1) <- rev(levels(f1))
f1
rm(list=ls())
f1 <- factor(letters)
levels(f1) <- rev(levels(f1))
library(ggplot2)
library(AppliedPredictiveModeling)
data(Glass)
str(Glass)
library(mlbench)
data(Glass)
str(Glass)
multiplotList <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <-  c(..., plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
colNames <- names(Glass)[1:9]
j <-1
plotList <- list()
for(i in colNames){
plt <- ggplot(Glass, aes_string(x=i)) + geom_density() + geom_rug()
assign(paste("plot", j, sep = ""), plt)
j <- j+1
plotList[[i]] <- plt
}
multiplotList(plotList[1:9],cols=3)
for(i in colNames){
plt <- ggplot(training, aes_string(x=i)) +geom_density())
print(plt)
Sys.sleep(2)
}
for(i in colNames){
plt <- ggplot(training, aes_string(x=i)) +geom_density()
print(plt)
Sys.sleep(2)
}
for(i in colNames){
plt <- ggplot(Glass, aes_string(x=i)) +geom_density()
print(plt)
Sys.sleep(2)
}
for(i in colNames){
plt <- ggplot(Glass, aes_string(x=i)) +geom_density()  + geom_rug()
print(plt)
Sys.sleep(2)
}
multiplotList(plotList[1:9],cols=3)
multiplotList(plotList[1:9],cols=3)
multiplotList <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <-  c(..., plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
library(ggplot2)
library(mlbench)
# load and summary of data
data(Glass)
str(Glass)
# make a list of ggplot2 objects
colNames <- names(Glass)[1:9]
j <- 1
plotList <- list()
for(i in colNames){
plt <- ggplot(Glass, aes_string(x=i)) + geom_density() + geom_rug()
assign(paste("plot", j, sep = ""), plt)
j <- j + 1
plotList[[i]] <- plt
}
multiplotList(plotList[1:9],cols=3)
head(Glass)
centerScale <- preProcess(Glass[, 1:9], method = c('center', 'scale'))
csData <- predict(centerScale, newdata = Glass[, 1:9])
ssData <- spatialSign(csData)
splom(~ssData, pch = 16, cex = 0.7)
library(car)
library(AppliedPredictiveModeling)
library(caret)
library(corrplot)
library(e1071)
library(mlbench)
library(reshape2)
library(vcd)
data(Glass)
str(Glass)
# lattice plots are good for exploratory
# first melt into long
meltedGlass <- melt(Glass, id.vars = 'Type')
densityplot(~value | variable,
data= meltedGlass,
# adjust axis so measure scale different for each panel
scales = list(x = list(relation = 'free'),
y = list(relation = 'free')),
# adjust smooths
adjust = 1.25,
# symbol on the rug for each data point
pch = '|',
xlab = 'Predictor')
# if do not like lattice, use ggplot2. Relies on my modified
# multiplot function
colNames <- names(Glass)[1:9]
j <-1
plotList <- list()
for(i in colNames){
plt <- ggplot(Glass, aes_string(x=i)) + geom_density() + geom_rug()
assign(paste("plot", j, sep = ""), plt)
j <- j+1
plotList[[i]] <- plt
}
multiplotList(plotList[1:9],cols=3)
# make scatterplot matrix using lattice
splom(~Glass[, 1:9], pch = 16, cex = 0.7 )
# or, if not too familier with lattice use a scatterplotMatrix
scatterplotMatrix(Glass[, 1:9], diagonal='none', smoother='none', reg.line='none')
# what transforms would help?
# Box-Cox cannot be applied as have many zero values
# use Yeo-Johnson instead!
yjTrans <- preProcess(Glass[, 1:9], method = 'YeoJohnson')
yjData <- predict(yjTrans, newdata = Glass[, 1:9])
# we see that it has not helped hugely...
splom(~yjData[, 1:9], pch = 16, cex = 0.7 )
colNames <- names(yjData)[1:9]
j <-1
plotList <- list()
for(i in colNames){
plt <- ggplot(yjData, aes_string(x=i)) + geom_density() + geom_rug()
assign(paste("plot", j, sep = ""), plt)
j <- j+1
plotList[[i]] <- plt
}
multiplotList(plotList[1:9],cols=3)
# try removing outliers
centerScale <- preProcess(Glass[, 1:9], method = c('center', 'scale'))
csData <- predict(centerScale, newdata = Glass[, 1:9])
ssData <- spatialSign(csData)
splom(~ssData, pch = 16, cex = 0.7)
rm(list=ls())
?summarise_each
library(dplyr)
?summarise_each
by_species <- iris %>% group_by(Species)
by_species <- iris %>% group_by(Species)
by_species %>% summarise_each(funs(length))
by_species %>% summarise(funs(length))
by_species %>% summarise(blah = length
)
by_species %>% summarise(blah = length())
head(by_species)
by_species %>% summarise(blah = length(Species))
by_species %>% summarise_each(funs(length))
by_species %>% summarise_each(funs(mean))
by_species %>% summarise(mean(Sepal.Length))
by_species %>% summarise_each(funs(mean))
by_species %>% summarise_each(funs(mean, sum))
View(by_species %>% summarise_each(funs(mean, sum)))
?rnorm
sd = intervalMeanSd[naIndex, 'intSd']))
We see there are far less days with 0-1000 steps, and that the mean and median have both increased.
library("dplyr"); library("ggplot2"); library("lattice"); library("gridExtra")
dataset <- read.csv(file = 'activity.csv',
header = TRUE,
stringsAsFactors = FALSE)
dataset$date <- as.Date(dataset$date)
# quick peek at dataset
head(dataset)
summary(dataset)
?round
?runif
?rexp
?rpois
?rexp
?rnorm
mutate(steps = abs(round(rnorm(n(), mean = intMean, sd = 5 ))))
# random normal distribution for missing samples, fixing sd = 10
dir()
seq(0, 1, length = 10)
?seq
?pbinom
pbinom(1,3)
pbinom(1,3, 0.5)
pbinom(1,3, 0.5) + pbinom(2, 3, 0.5)
pbinom(1,3, 0.5, lower.tail = F)
pbinom(2,3, 0.5, lower.tail = F)
pbinom(3, 3, 0.5, lower.tail = F)
pbinom(0, 3, 0.5, lower.tail = F)
pbinom(0, 3, 0.5, lower.tail = F)
pbinom(0, 3, 0.5)
pbinom(2, 3, 0.5)
pbinom(3, 3, 0.5)
pbinom(0, 3, 0.5)
-exp(-11/10)
pexp(11,0.1,lower.tail=F)
?pbinom
p <- seq(0,1,length=1000)
plot(p, var(p*(1-p)))
pbinom(1, 1000, 0.5)
?rnorm
rnorm(10, 0, 1)
?rbinom
rbinom(1, 10m 0.5)
rbinom(1, 10, 0.5)
rbinom(2, 10, 0.5)
rbinom(100, 10, 0.5)
hist(rbinom(100, 10, 0.5))
hist(rbinom(1000, 10, 0.5))
hist(rbinom(1000, 100, 0.5))
hist(rbinom(1000, 1000, 0.5))
hist(rbinom(1000, 10, 0.5))
hist(rbinom(10, 10, 0.5))
hist(rbinom(100, 10, 0.5))
hist(rbinom(1000, 10, 0.5))
hist(rbinom(10000, 10, 0.5))
hist(rbinom(100000, 10, 0.5))
?runif
punif(0.75)
x <- seq(1,10,1000)
plot(x, 1/x^2)
x
?seq
x <- seq(1,10,0.002)
plot(x, 1/x^2)
x <- seq(0,1,0.01)
plot(x, 2*x*exp(-x^2))
x <- seq(0,2,0.01)
plot(x, 2*x*exp(-x^2))
x <- seq(0,10,0.01)
plot(x, 2*x*exp(-x^2))
quant(2*x*exp(-x^2))
?quant
?quatile
?percentile
?quantile
?quantile(2*x*exp(-x^2))
quantile(2*x*exp(-x^2))
?rbinom
rbinom(10,1,0,5)
rbinom(10,1,0.5)
rbinom(10,1,0.5) + 1
rbinom(10,1,0,5)
rbinom(10,1,0.5)
rbinom(10,10,0.5)
var(rbinom(10,10,0.5))
var(rbinom(100,10,0.5))
var(rbinom(1000,10,0.5))
var(rbinom(10000,10,0.5))
var(rbinom(10000000,10,0.5))
var(rbinom(10,100000,0.5))
var(rbinom(10,10,0.5))
var(rbinom(10,1,0.5))
var(rbinom(1,10,0.5))
qexp(0.5,1/2)
rbinom(10,1,0.5)
blah <- c(1,-1,-1,1,-1,1,1,-1,-1,-1)
var(blah)
rbinom(10,1,0.5)
blah2 <- c(-1,1,1,-1,-1,-1,1,1,-1,1)
var(blah2)
var(-1,-1,-1,-1,-1,1,1,1,1)
var(c(-1,-1,-1,-1,-1,1,1,1,1))
var(c(-1,-1,-1,-1,-1,1,1,1,1,1))
var(c(-1,-1,-1,-1,-1,1,1,1,1,1,1))
var(c(-1,-1,-1,-1,-1,1,1,1,1,1,1,1))
?pnorm
pnorm(2)
pnorm(2, lower.tail=T)
pnorm(2, lower.tail=F)
?qnorm
qnorm(0.1)
x <- seq(1,6)
x
sapply(x, function(x) x^0.5 * 0.5 ^ (6-x))
sapply(x, function(x) x^0.5 * 0.5 ^ (6-x))
x <- seq(0,6)
sapply(x, function(x) x^0.5 * 0.5 ^ (6-x))
sapply(x, function(x) 0.5^x * 0.5 ^ (6-x))
sapply(x, function(x) 0.5^x * (1-0.5) ^ (6-x))
x
sapply(x, function(x) {0.5^x * (1-0.5) ^ (6-x)})
sapply(x, function(x) {(0.5^x) * (1-0.5) ^ (6-x)})
sapply(x, function(x) {(0.5^x) * 0.5 ^ (6-x)})
sapply(x, function(x) {choose(6,x) * (0.5^x) * 0.5 ^ (6-x)})
plot(0.015625 0.093750 0.234375 0.312500 0.234375 0.093750 0.015625)
plot(sapply(x, function(x) {choose(6,x) * (0.5^x) * 0.5 ^ (6-x)}) )
plot(sapply(x, function(x) {choose(6,x) * (0.5^x) * 0.5 ^ (6-x)}) ~ seq(0,6) )
mean(runif(1000))
runif(1000)
pnorm(-1)
?pnorm
rnorm(5,80,10)
rnorm(5,80,10)
rnorm(5,80,10)
rnorm(5,80,10)
rnorm(5,80,10)
replicate(rnorm(5,80,10),10)
replicate(10, rnorm(5,80,10))
replicate(20, rnorm(5,80,10))
blah <- (replicate(20, rnorm(5,80,10))
)
blah
apply(blah, 2, function(x) sum(x > 0.9))
apply(blah, 2, function(x) sum(x > 90))
apply(blah, 2, function(x) sum(x > 90)) / 20
apply(blah, 2, function(x) sum(x > 90))
blah <- (replicate(100, rnorm(5,80,10))
)
apply(blah, 2, function(x) sum(x > 90))
blah <- (replicate(100, rnorm(5,80,10)))
blah <- (replicate(10000, rnorm(5,80,10)))
apply(blah, 2, function(x) sum(x > 90))
out <- apply(blah, 2, function(x) sum(x > 90))
length(out[out>=4])
29/10000
sp2 <- 17
meandiff <- 2
meandiff + c(1, -1) * qt(0.975, df = 14) * (17 * sqrt(1/8 + 1/21))
log(17l14877)
log(17.14877)
meandiff + c(1, -1) * qt(0.975, df = 14) * (sqrt(17) * sqrt(1/8 + 1/21))
log(5,67)
log(5.67)
qt(0.975, 14)
?t.test
library(boot)
stat <- function(x, i} median(x[i])
stat <- function(x, i) median(x[i])
boot.out <- boot(data = c(1, 3, 7),)
boot.out <- boot(data = c(1, 3, 7), statistic = stat, R = 1000)
boot.ci(boot.out)
boot.out
unif <- runif(1000)
expon <- rexp(1000)
quantile(unif)
plot(quantile(unif)~quantile(expon))
plot(quantile(expon) ~quantile(unif))
?expon
?rexpon
?rexp
?qqplot
qqplot(expon,unif)
qqplot(unif,expon)
seq(1,10)
seq(1,10, 0.1)
x <- seq(1,10, 0.1)
y <- 1- exp(-x)
plot(y ~ x)
z <- -log(1-x)
plot(z ~ x)
z
x <- seq(0,0.99, 0.01)
z <- -log(1-x)
plot(z ~ x)
?rexp
qt(0.975,8)
qt(0.975,18)
norm = rnorm(1000)
exp = rexp(1000)
qqplot(exp, norm)
x <- seq(1,8,0.1)
y = 1 - exp(-x)
plot(y ~ x)
norms <- rnorm(10000)
lognorms <- log(norms)
unifs <- runif(10000)
lognorms <- log(unifs)
exp(mean(lognorms))
1/e
1/exp(1)
exp(0.5)
exp(log(0.5))
lognorms <- lognormal(5,2,10000)
lognorm
?runif
rlognorm
rlnorm(10000,5,2)
lnorms <- rlnorm(10000,5,2)
loglnorms <- log(lnorms)
median(loglnorms)
mean(loglnorms)
seq(1,100,5)
rm(list = ls())
library(utils)
remove.packages(slidify)
remove.packages('slidify')
remove.packages('slidifyLibraries')
library(slidify)
library(devtools)
rm(list = ls())
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
setwd("Desktop/devDataProd_deck/")
library(slidify)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
library(devtools)
install_github("slidifyLibraries", "ramnathv")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
library(devtools)
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
install_github('rNVD3', 'ramnathv')
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
